
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f2  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000221  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000022f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cf  00000000  00000000  00000267  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000579  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  000010af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001790  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_1 0000003e  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_2 0000003e  000000aa  000000aa  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_3 0000003e  000000e8  000000e8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000034  00000126  00000126  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  00000178  00000178  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  0000017a  0000017a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  0000017c  0000017c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000015a  0000015a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000174  00000174  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <_etext>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_2>
   c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_3>
  10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  40:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  48:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 93 00 	call	0x126	; 0x126 <main>
  64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000170 <__bad_interrupt>:
 170:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

0000006c <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>


ISR(INT0_vect) {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	PORTD|=(1<<5);
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e7       	ldi	r18, 0x7F	; 127
  84:	84 e8       	ldi	r24, 0x84	; 132
  86:	9e e1       	ldi	r25, 0x1E	; 30
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <__vector_1+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <__vector_1+0x26>
  92:	00 00       	nop
	_delay_ms(10000);
	PORTD&=~(1<<5);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7d       	andi	r24, 0xDF	; 223
  98:	82 bb       	out	0x12, r24	; 18
}
  9a:	9f 91       	pop	r25
  9c:	8f 91       	pop	r24
  9e:	2f 91       	pop	r18
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

Disassembly of section .text.__vector_2:

000000aa <__vector_2>:
ISR(INT1_vect) {
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	PORTD|=(1<<6);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	82 bb       	out	0x12, r24	; 18
  c0:	2f e7       	ldi	r18, 0x7F	; 127
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	9e e1       	ldi	r25, 0x1E	; 30
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <__vector_2+0x1c>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <__vector_2+0x26>
  d0:	00 00       	nop
	_delay_ms(10000);
	PORTD&=~(1<<6);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7b       	andi	r24, 0xBF	; 191
  d6:	82 bb       	out	0x12, r24	; 18
}
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	2f 91       	pop	r18
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

Disassembly of section .text.__vector_3:

000000e8 <__vector_3>:
ISR(INT2_vect) {
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	PORTD|=(1<<7);
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	2f e7       	ldi	r18, 0x7F	; 127
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	9e e1       	ldi	r25, 0x1E	; 30
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <__vector_3+0x1c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <__vector_3+0x26>
 10e:	00 00       	nop
	_delay_ms(10000);
	PORTD&=~(1<<7);
 110:	82 b3       	in	r24, 0x12	; 18
 112:	8f 77       	andi	r24, 0x7F	; 127
 114:	82 bb       	out	0x12, r24	; 18
}
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

Disassembly of section .text.main:

00000126 <main>:
int  main()
{
	//set portD7,6,5 to be output
	DDRD |=((1<<7)|(1<<6)|(1<<5));
 126:	81 b3       	in	r24, 0x11	; 17
 128:	80 6e       	ori	r24, 0xE0	; 224
 12a:	81 bb       	out	0x11, r24	; 17
	DDRD &=~(1<<2);
 12c:	81 b3       	in	r24, 0x11	; 17
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	81 bb       	out	0x11, r24	; 17
	DDRD &=~(1<<3);
 132:	81 b3       	in	r24, 0x11	; 17
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	81 bb       	out	0x11, r24	; 17
	DDRB &=~(1<<2);
 138:	87 b3       	in	r24, 0x17	; 23
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	87 bb       	out	0x17, r24	; 23

	//mcu control register to aany logical change
	MCUCR &= ~(0b00001111);
 13e:	85 b7       	in	r24, 0x35	; 53
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (0b00000101);
 144:	85 b7       	in	r24, 0x35	; 53
 146:	85 60       	ori	r24, 0x05	; 5
 148:	85 bf       	out	0x35, r24	; 53
	//int2 has only falling and raising detection
	MCUCSR&=~(1<<6);
 14a:	84 b7       	in	r24, 0x34	; 52
 14c:	8f 7b       	andi	r24, 0xBF	; 191
 14e:	84 bf       	out	0x34, r24	; 52
	//enable int0,1,2 register
	GICR |= (1 << INT0)|(1<<INT1)|(1<<INT2);
 150:	8b b7       	in	r24, 0x3b	; 59
 152:	80 6e       	ori	r24, 0xE0	; 224
 154:	8b bf       	out	0x3b, r24	; 59
	//enable global interupt register
    sei();
 156:	78 94       	sei
 158:	ff cf       	rjmp	.-2      	; 0x158 <main+0x32>

Disassembly of section .text.__dummy_fini:

00000178 <_fini>:
 178:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000017a <__funcs_on_exit>:
 17a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000017c <__simulator_exit>:
 17c:	08 95       	ret

Disassembly of section .text.exit:

0000015a <exit>:
 15a:	ec 01       	movw	r28, r24
 15c:	0e 94 bd 00 	call	0x17a	; 0x17a <__funcs_on_exit>
 160:	0e 94 bc 00 	call	0x178	; 0x178 <_fini>
 164:	ce 01       	movw	r24, r28
 166:	0e 94 be 00 	call	0x17c	; 0x17c <__simulator_exit>
 16a:	ce 01       	movw	r24, r28
 16c:	0e 94 ba 00 	call	0x174	; 0x174 <_Exit>

Disassembly of section .text._Exit:

00000174 <_Exit>:
 174:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
