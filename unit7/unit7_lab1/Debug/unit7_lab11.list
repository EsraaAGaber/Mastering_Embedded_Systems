
unit7_lab11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000384  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000384  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000132  00000000  00000000  000103ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000cc  00000000  00000000  000104df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000060  00000000  00000000  000105b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  00010610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f4a  00000000  00000000  00010658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000468  00000000  00000000  000115a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003cb8  00000000  00000000  00011a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000156c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c4  00000000  00000000  00015740  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000364 	.word	0x08000364

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000364 	.word	0x08000364

08000170 <init_GPIO>:
#define GPIOB_CRL *(vuint32_t*)(GPIOB_BASE+0x00)
#define GPIOB_ODR *(vuint32_t*)(GPIOB_BASE+0x0c)
#define GPIOB_IDR *(vuint32_t*)(GPIOB_BASE+0x08)

 void init_GPIO()
 {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0



 GPIOA_CRL=0;
 8000174:	4b1e      	ldr	r3, [pc, #120]	; (80001f0 <init_GPIO+0x80>)
 8000176:	2200      	movs	r2, #0
 8000178:	601a      	str	r2, [r3, #0]
 GPIOA_CRH=0;
 800017a:	4b1e      	ldr	r3, [pc, #120]	; (80001f4 <init_GPIO+0x84>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 GPIOA_ODR=0;
 8000180:	4b1d      	ldr	r3, [pc, #116]	; (80001f8 <init_GPIO+0x88>)
 8000182:	2200      	movs	r2, #0
 8000184:	601a      	str	r2, [r3, #0]


	//A1 input floating 01
 GPIOA_CRL&=~(0b11<<4);
 8000186:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <init_GPIO+0x80>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4a19      	ldr	r2, [pc, #100]	; (80001f0 <init_GPIO+0x80>)
 800018c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000190:	6013      	str	r3, [r2, #0]
	GPIOA_CRL|=(0b01<<6);
 8000192:	4b17      	ldr	r3, [pc, #92]	; (80001f0 <init_GPIO+0x80>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a16      	ldr	r2, [pc, #88]	; (80001f0 <init_GPIO+0x80>)
 8000198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800019c:	6013      	str	r3, [r2, #0]
 //B1 output push pull
		GPIOB_CRL|=(0b01<<4);
 800019e:	4b17      	ldr	r3, [pc, #92]	; (80001fc <init_GPIO+0x8c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a16      	ldr	r2, [pc, #88]	; (80001fc <init_GPIO+0x8c>)
 80001a4:	f043 0310 	orr.w	r3, r3, #16
 80001a8:	6013      	str	r3, [r2, #0]
		GPIOB_CRL&=~(0b11<<6);
 80001aa:	4b14      	ldr	r3, [pc, #80]	; (80001fc <init_GPIO+0x8c>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a13      	ldr	r2, [pc, #76]	; (80001fc <init_GPIO+0x8c>)
 80001b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001b4:	6013      	str	r3, [r2, #0]

	// A13 input floating
	 GPIOA_CRH&=~(0b11<<20);
 80001b6:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <init_GPIO+0x84>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a0e      	ldr	r2, [pc, #56]	; (80001f4 <init_GPIO+0x84>)
 80001bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001c0:	6013      	str	r3, [r2, #0]
		GPIOA_CRH|=(0b01<<22);
 80001c2:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <init_GPIO+0x84>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a0b      	ldr	r2, [pc, #44]	; (80001f4 <init_GPIO+0x84>)
 80001c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001cc:	6013      	str	r3, [r2, #0]


	//b13 output push pull
		GPIOB_CRH|=(0b01<<20);
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <init_GPIO+0x90>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0b      	ldr	r2, [pc, #44]	; (8000200 <init_GPIO+0x90>)
 80001d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001d8:	6013      	str	r3, [r2, #0]
		GPIOB_CRH&=~(0b11<<22);
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <init_GPIO+0x90>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a08      	ldr	r2, [pc, #32]	; (8000200 <init_GPIO+0x90>)
 80001e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80001e4:	6013      	str	r3, [r2, #0]

 }
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40010800 	.word	0x40010800
 80001f4:	40010804 	.word	0x40010804
 80001f8:	4001080c 	.word	0x4001080c
 80001fc:	40010c00 	.word	0x40010c00
 8000200:	40010c04 	.word	0x40010c04

08000204 <init_clock>:
 void init_clock()
 {
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	 //GPIO enable clock
	 RCC_APB2ENR |=RCC_IOPAEN;
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <init_clock+0x24>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a06      	ldr	r2, [pc, #24]	; (8000228 <init_clock+0x24>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6013      	str	r3, [r2, #0]
	 RCC_APB2ENR |=(1<<3);
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <init_clock+0x24>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a03      	ldr	r2, [pc, #12]	; (8000228 <init_clock+0x24>)
 800021a:	f043 0308 	orr.w	r3, r3, #8
 800021e:	6013      	str	r3, [r2, #0]
 }
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	40021018 	.word	0x40021018

0800022c <dely>:
 void dely(int x)
 {
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
	 unsigned int i,j;
	 for (i=0;i<x;i++)
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
 8000238:	e00b      	b.n	8000252 <dely+0x26>
		 for (j=0;j<255;j++);
 800023a:	2300      	movs	r3, #0
 800023c:	60bb      	str	r3, [r7, #8]
 800023e:	e002      	b.n	8000246 <dely+0x1a>
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	3301      	adds	r3, #1
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	2bfe      	cmp	r3, #254	; 0xfe
 800024a:	d9f9      	bls.n	8000240 <dely+0x14>
	 for (i=0;i<x;i++)
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	3301      	adds	r3, #1
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	68fa      	ldr	r2, [r7, #12]
 8000256:	429a      	cmp	r2, r3
 8000258:	d3ef      	bcc.n	800023a <dely+0xe>
 }
 800025a:	bf00      	nop
 800025c:	3714      	adds	r7, #20
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <main>:
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	init_clock();
 800026a:	f7ff ffcb 	bl	8000204 <init_clock>
	init_GPIO();
 800026e:	f7ff ff7f 	bl	8000170 <init_GPIO>
	volatile char flag =1;
 8000272:	2301      	movs	r3, #1
 8000274:	71fb      	strb	r3, [r7, #7]
	while (1){

		if (!(GPIOA_IDR&(1<<1)))
 8000276:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <main+0x5c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 0302 	and.w	r3, r3, #2
 800027e:	2b00      	cmp	r3, #0
 8000280:	d10c      	bne.n	800029c <main+0x38>
		{
			if (flag)
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	b2db      	uxtb	r3, r3
 8000286:	2b00      	cmp	r3, #0
 8000288:	d005      	beq.n	8000296 <main+0x32>
			GPIOB_ODR^=(1<<1);
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <main+0x60>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <main+0x60>)
 8000290:	f083 0302 	eor.w	r3, r3, #2
 8000294:	6013      	str	r3, [r2, #0]
			flag=0;
 8000296:	2300      	movs	r3, #0
 8000298:	71fb      	strb	r3, [r7, #7]
 800029a:	e001      	b.n	80002a0 <main+0x3c>

		}
		else flag=1;
 800029c:	2301      	movs	r3, #1
 800029e:	71fb      	strb	r3, [r7, #7]
		if ((GPIOA_IDR&(1<<13)))
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <main+0x5c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d005      	beq.n	80002b8 <main+0x54>
		{
			GPIOB_ODR^=(1<<13);
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <main+0x60>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <main+0x60>)
 80002b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002b6:	6013      	str	r3, [r2, #0]


		}

		dely(10);
 80002b8:	200a      	movs	r0, #10
 80002ba:	f7ff ffb7 	bl	800022c <dely>
		if (!(GPIOA_IDR&(1<<1)))
 80002be:	e7da      	b.n	8000276 <main+0x12>
 80002c0:	40010808 	.word	0x40010808
 80002c4:	40010c0c 	.word	0x40010c0c

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ffb3 	bl	8000264 <main>

080002fe <LoopForever>:

LoopForever:
    b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC1_2_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	2500      	movs	r5, #0
 8000320:	4e0c      	ldr	r6, [pc, #48]	; (8000354 <__libc_init_array+0x38>)
 8000322:	4c0d      	ldr	r4, [pc, #52]	; (8000358 <__libc_init_array+0x3c>)
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	42a5      	cmp	r5, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	f000 f81a 	bl	8000364 <_init>
 8000330:	2500      	movs	r5, #0
 8000332:	4e0a      	ldr	r6, [pc, #40]	; (800035c <__libc_init_array+0x40>)
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <__libc_init_array+0x44>)
 8000336:	1ba4      	subs	r4, r4, r6
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	42a5      	cmp	r5, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000344:	4798      	blx	r3
 8000346:	3501      	adds	r5, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800034e:	4798      	blx	r3
 8000350:	3501      	adds	r5, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
