
unit7_lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001e9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ee  00000000  00000000  00000217  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000502  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e0  00000000  00000000  00000e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000138  00000138  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    000000b6  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  00000140  00000140  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  00000142  00000142  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  00000144  00000144  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  00000122  00000122  00000196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
   8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
   c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000138 <__bad_interrupt>:
 138:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#include "MemMap.h"
#include "Utils.h"


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	SETBIT(DDRD,4);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 61       	ori	r24, 0x10	; 16
  7c:	81 bb       	out	0x11, r24	; 17
		SETBIT(DDRD,5);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 62       	ori	r24, 0x20	; 32
  82:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,6);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	80 64       	ori	r24, 0x40	; 64
  88:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,7);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	81 bb       	out	0x11, r24	; 17

    while(1)
    { volatile unsigned int i,j;
		for (i=5;i<8;i++)
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	9c 83       	std	Y+4, r25	; 0x04
  96:	8b 83       	std	Y+3, r24	; 0x03
  98:	2c c0       	rjmp	.+88     	; 0xf2 <main+0x86>
		{
			PORTD|=(1<<i);
  9a:	2b 81       	ldd	r18, Y+3	; 0x03
  9c:	3c 81       	ldd	r19, Y+4	; 0x04
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	2a 95       	dec	r18
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <main+0x38>
  ac:	92 b3       	in	r25, 0x12	; 18
  ae:	89 2b       	or	r24, r25
  b0:	82 bb       	out	0x12, r24	; 18
			for (j=0;j<60000;j++);
  b2:	1a 82       	std	Y+2, r1	; 0x02
  b4:	19 82       	std	Y+1, r1	; 0x01
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <main+0x56>
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	9a 81       	ldd	r25, Y+2	; 0x02
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	9a 83       	std	Y+2, r25	; 0x02
  c0:	89 83       	std	Y+1, r24	; 0x01
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	9a 81       	ldd	r25, Y+2	; 0x02
  c6:	80 36       	cpi	r24, 0x60	; 96
  c8:	9a 4e       	sbci	r25, 0xEA	; 234
  ca:	b0 f3       	brcs	.-20     	; 0xb8 <main+0x4c>
			PORTD&=~(1<<i);
  cc:	2b 81       	ldd	r18, Y+3	; 0x03
  ce:	3c 81       	ldd	r19, Y+4	; 0x04
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	2a 95       	dec	r18
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <main+0x6a>
  de:	80 95       	com	r24
  e0:	90 95       	com	r25
  e2:	92 b3       	in	r25, 0x12	; 18
  e4:	89 23       	and	r24, r25
  e6:	82 bb       	out	0x12, r24	; 18
	SETBIT(DDRD,6);
	SETBIT(DDRD,7);

    while(1)
    { volatile unsigned int i,j;
		for (i=5;i<8;i++)
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	9c 81       	ldd	r25, Y+4	; 0x04
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	9c 83       	std	Y+4, r25	; 0x04
  f0:	8b 83       	std	Y+3, r24	; 0x03
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	9c 81       	ldd	r25, Y+4	; 0x04
  f6:	08 97       	sbiw	r24, 0x08	; 8
  f8:	80 f2       	brcs	.-96     	; 0x9a <main+0x2e>
		{
			PORTD|=(1<<i);
			for (j=0;j<60000;j++);
			PORTD&=~(1<<i);
		}
		PORTD|=(1<<4);
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	82 bb       	out	0x12, r24	; 18
		for (j=0;j<60000;j++);
 100:	1a 82       	std	Y+2, r1	; 0x02
 102:	19 82       	std	Y+1, r1	; 0x01
 104:	05 c0       	rjmp	.+10     	; 0x110 <main+0xa4>
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	9a 83       	std	Y+2, r25	; 0x02
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	9a 81       	ldd	r25, Y+2	; 0x02
 114:	80 36       	cpi	r24, 0x60	; 96
 116:	9a 4e       	sbci	r25, 0xEA	; 234
 118:	b0 f3       	brcs	.-20     	; 0x106 <main+0x9a>

		PORTD&=~(1<<4);
 11a:	82 b3       	in	r24, 0x12	; 18
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	82 bb       	out	0x12, r24	; 18
		
		
    }
 120:	b7 cf       	rjmp	.-146    	; 0x90 <main+0x24>

Disassembly of section .text.__dummy_fini:

00000140 <_fini>:
 140:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000142 <__funcs_on_exit>:
 142:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000144 <__simulator_exit>:
 144:	08 95       	ret

Disassembly of section .text.exit:

00000122 <exit>:
 122:	ec 01       	movw	r28, r24
 124:	0e 94 a1 00 	call	0x142	; 0x142 <__funcs_on_exit>
 128:	0e 94 a0 00 	call	0x140	; 0x140 <_fini>
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 a2 00 	call	0x144	; 0x144 <__simulator_exit>
 132:	ce 01       	movw	r24, r28
 134:	0e 94 9e 00 	call	0x13c	; 0x13c <_Exit>

Disassembly of section .text._Exit:

0000013c <_Exit>:
 13c:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
