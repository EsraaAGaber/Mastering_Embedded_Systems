
DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c1c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000d4c  08000d4c  00010d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d78  08000d78  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000d78  08000d78  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d78  08000d78  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d78  08000d78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d7c  08000d7c  00010d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000da0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000da0  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003019  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000798  00000000  00000000  00023062  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006a0  00000000  00000000  000237fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000140  00000000  00000000  00023ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00023fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002055  00000000  00000000  000240d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001a64  00000000  00000000  0002612d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007bc7  00000000  00000000  00027b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f758  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000398  00000000  00000000  0002f7d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d34 	.word	0x08000d34

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000d34 	.word	0x08000d34

08000170 <Keypad_init>:
#include "keypad.h"

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0


	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000174:	4b37      	ldr	r3, [pc, #220]	; (8000254 <Keypad_init+0xe4>)
 8000176:	2204      	movs	r2, #4
 8000178:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 800017a:	4b36      	ldr	r3, [pc, #216]	; (8000254 <Keypad_init+0xe4>)
 800017c:	2201      	movs	r2, #1
 800017e:	70da      	strb	r2, [r3, #3]
	PinConfig.GPIO_PinNumber=R0;
 8000180:	4b34      	ldr	r3, [pc, #208]	; (8000254 <Keypad_init+0xe4>)
 8000182:	2201      	movs	r2, #1
 8000184:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinConfig);
 8000186:	4933      	ldr	r1, [pc, #204]	; (8000254 <Keypad_init+0xe4>)
 8000188:	4833      	ldr	r0, [pc, #204]	; (8000258 <Keypad_init+0xe8>)
 800018a:	f000 fbe6 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 800018e:	4b31      	ldr	r3, [pc, #196]	; (8000254 <Keypad_init+0xe4>)
 8000190:	2204      	movs	r2, #4
 8000192:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <Keypad_init+0xe4>)
 8000196:	2201      	movs	r2, #1
 8000198:	70da      	strb	r2, [r3, #3]
	PinConfig.GPIO_PinNumber=R1;
 800019a:	4b2e      	ldr	r3, [pc, #184]	; (8000254 <Keypad_init+0xe4>)
 800019c:	2202      	movs	r2, #2
 800019e:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinConfig);
 80001a0:	492c      	ldr	r1, [pc, #176]	; (8000254 <Keypad_init+0xe4>)
 80001a2:	482d      	ldr	r0, [pc, #180]	; (8000258 <Keypad_init+0xe8>)
 80001a4:	f000 fbd9 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80001a8:	4b2a      	ldr	r3, [pc, #168]	; (8000254 <Keypad_init+0xe4>)
 80001aa:	2204      	movs	r2, #4
 80001ac:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80001ae:	4b29      	ldr	r3, [pc, #164]	; (8000254 <Keypad_init+0xe4>)
 80001b0:	2201      	movs	r2, #1
 80001b2:	70da      	strb	r2, [r3, #3]
	PinConfig.GPIO_PinNumber=R2;
 80001b4:	4b27      	ldr	r3, [pc, #156]	; (8000254 <Keypad_init+0xe4>)
 80001b6:	2208      	movs	r2, #8
 80001b8:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinConfig);
 80001ba:	4926      	ldr	r1, [pc, #152]	; (8000254 <Keypad_init+0xe4>)
 80001bc:	4826      	ldr	r0, [pc, #152]	; (8000258 <Keypad_init+0xe8>)
 80001be:	f000 fbcc 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80001c2:	4b24      	ldr	r3, [pc, #144]	; (8000254 <Keypad_init+0xe4>)
 80001c4:	2204      	movs	r2, #4
 80001c6:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80001c8:	4b22      	ldr	r3, [pc, #136]	; (8000254 <Keypad_init+0xe4>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	70da      	strb	r2, [r3, #3]
	PinConfig.GPIO_PinNumber=R3;
 80001ce:	4b21      	ldr	r3, [pc, #132]	; (8000254 <Keypad_init+0xe4>)
 80001d0:	2210      	movs	r2, #16
 80001d2:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinConfig);
 80001d4:	491f      	ldr	r1, [pc, #124]	; (8000254 <Keypad_init+0xe4>)
 80001d6:	4820      	ldr	r0, [pc, #128]	; (8000258 <Keypad_init+0xe8>)
 80001d8:	f000 fbbf 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <Keypad_init+0xe4>)
 80001de:	2204      	movs	r2, #4
 80001e0:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80001e2:	4b1c      	ldr	r3, [pc, #112]	; (8000254 <Keypad_init+0xe4>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	70da      	strb	r2, [r3, #3]
	PinConfig.GPIO_PinNumber=C0;
 80001e8:	4b1a      	ldr	r3, [pc, #104]	; (8000254 <Keypad_init+0xe4>)
 80001ea:	2220      	movs	r2, #32
 80001ec:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinConfig);
 80001ee:	4919      	ldr	r1, [pc, #100]	; (8000254 <Keypad_init+0xe4>)
 80001f0:	4819      	ldr	r0, [pc, #100]	; (8000258 <Keypad_init+0xe8>)
 80001f2:	f000 fbb2 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80001f6:	4b17      	ldr	r3, [pc, #92]	; (8000254 <Keypad_init+0xe4>)
 80001f8:	2204      	movs	r2, #4
 80001fa:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80001fc:	4b15      	ldr	r3, [pc, #84]	; (8000254 <Keypad_init+0xe4>)
 80001fe:	2201      	movs	r2, #1
 8000200:	70da      	strb	r2, [r3, #3]
	PinConfig.GPIO_PinNumber=C1;
 8000202:	4b14      	ldr	r3, [pc, #80]	; (8000254 <Keypad_init+0xe4>)
 8000204:	2240      	movs	r2, #64	; 0x40
 8000206:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinConfig);
 8000208:	4912      	ldr	r1, [pc, #72]	; (8000254 <Keypad_init+0xe4>)
 800020a:	4813      	ldr	r0, [pc, #76]	; (8000258 <Keypad_init+0xe8>)
 800020c:	f000 fba5 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000210:	4b10      	ldr	r3, [pc, #64]	; (8000254 <Keypad_init+0xe4>)
 8000212:	2204      	movs	r2, #4
 8000214:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <Keypad_init+0xe4>)
 8000218:	2201      	movs	r2, #1
 800021a:	70da      	strb	r2, [r3, #3]
	PinConfig.GPIO_PinNumber=C2;
 800021c:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <Keypad_init+0xe4>)
 800021e:	2280      	movs	r2, #128	; 0x80
 8000220:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinConfig);
 8000222:	490c      	ldr	r1, [pc, #48]	; (8000254 <Keypad_init+0xe4>)
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <Keypad_init+0xe8>)
 8000226:	f000 fb98 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <Keypad_init+0xe4>)
 800022c:	2204      	movs	r2, #4
 800022e:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <Keypad_init+0xe4>)
 8000232:	2201      	movs	r2, #1
 8000234:	70da      	strb	r2, [r3, #3]
	PinConfig.GPIO_PinNumber=C3;
 8000236:	4b07      	ldr	r3, [pc, #28]	; (8000254 <Keypad_init+0xe4>)
 8000238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800023c:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinConfig);
 800023e:	4905      	ldr	r1, [pc, #20]	; (8000254 <Keypad_init+0xe4>)
 8000240:	4805      	ldr	r0, [pc, #20]	; (8000258 <Keypad_init+0xe8>)
 8000242:	f000 fb8a 	bl	800095a <MCAL_GPIO_Init>

	MCAL_GPIO_Write_Port(KEYPAD_PORT, 0xff);
 8000246:	21ff      	movs	r1, #255	; 0xff
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <Keypad_init+0xe8>)
 800024a:	f000 fc37 	bl	8000abc <MCAL_GPIO_Write_Port>
	//	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
	//	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
	//KEYPAD_PORT = 0xFF;
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	2000003c 	.word	0x2000003c
 8000258:	40010c00 	.word	0x40010c00

0800025c <Keypad_getkey>:

char Keypad_getkey(){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 4; i++){
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e0b4      	b.n	80003d2 <Keypad_getkey+0x176>
		MCAL_GPIO_Write_PIN(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 8000268:	4b5e      	ldr	r3, [pc, #376]	; (80003e4 <Keypad_getkey+0x188>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	485d      	ldr	r0, [pc, #372]	; (80003e8 <Keypad_getkey+0x18c>)
 8000274:	f000 fc04 	bl	8000a80 <MCAL_GPIO_Write_PIN>
		MCAL_GPIO_Write_PIN(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 8000278:	4b5a      	ldr	r3, [pc, #360]	; (80003e4 <Keypad_getkey+0x188>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	4859      	ldr	r0, [pc, #356]	; (80003e8 <Keypad_getkey+0x18c>)
 8000284:	f000 fbfc 	bl	8000a80 <MCAL_GPIO_Write_PIN>
		MCAL_GPIO_Write_PIN(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 8000288:	4b56      	ldr	r3, [pc, #344]	; (80003e4 <Keypad_getkey+0x188>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	b29b      	uxth	r3, r3
 800028e:	2201      	movs	r2, #1
 8000290:	4619      	mov	r1, r3
 8000292:	4855      	ldr	r0, [pc, #340]	; (80003e8 <Keypad_getkey+0x18c>)
 8000294:	f000 fbf4 	bl	8000a80 <MCAL_GPIO_Write_PIN>
		MCAL_GPIO_Write_PIN(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 8000298:	4b52      	ldr	r3, [pc, #328]	; (80003e4 <Keypad_getkey+0x188>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	b29b      	uxth	r3, r3
 800029e:	2201      	movs	r2, #1
 80002a0:	4619      	mov	r1, r3
 80002a2:	4851      	ldr	r0, [pc, #324]	; (80003e8 <Keypad_getkey+0x18c>)
 80002a4:	f000 fbec 	bl	8000a80 <MCAL_GPIO_Write_PIN>
		MCAL_GPIO_Write_PIN(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 80002a8:	4a4e      	ldr	r2, [pc, #312]	; (80003e4 <Keypad_getkey+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	484c      	ldr	r0, [pc, #304]	; (80003e8 <Keypad_getkey+0x18c>)
 80002b8:	f000 fbe2 	bl	8000a80 <MCAL_GPIO_Write_PIN>

//		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
//		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		for(j = 0; j < 4; j++){
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	e080      	b.n	80003c4 <Keypad_getkey+0x168>
			if (!MCAL_GPIO_Read_PIN(KEYPAD_PORT, Key_padRow[j]))
 80002c2:	4a4a      	ldr	r2, [pc, #296]	; (80003ec <Keypad_getkey+0x190>)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	4846      	ldr	r0, [pc, #280]	; (80003e8 <Keypad_getkey+0x18c>)
 80002d0:	f000 fbc2 	bl	8000a58 <MCAL_GPIO_Read_PIN>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d171      	bne.n	80003be <Keypad_getkey+0x162>
			{
				while(!MCAL_GPIO_Read_PIN(KEYPAD_PORT, Key_padRow[j]));
 80002da:	bf00      	nop
 80002dc:	4a43      	ldr	r2, [pc, #268]	; (80003ec <Keypad_getkey+0x190>)
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	483f      	ldr	r0, [pc, #252]	; (80003e8 <Keypad_getkey+0x18c>)
 80002ea:	f000 fbb5 	bl	8000a58 <MCAL_GPIO_Read_PIN>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f3      	beq.n	80002dc <Keypad_getkey+0x80>
				switch(i){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d861      	bhi.n	80003be <Keypad_getkey+0x162>
 80002fa:	a201      	add	r2, pc, #4	; (adr r2, 8000300 <Keypad_getkey+0xa4>)
 80002fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000300:	08000311 	.word	0x08000311
 8000304:	08000339 	.word	0x08000339
 8000308:	08000361 	.word	0x08000361
 800030c:	08000389 	.word	0x08000389
				case (0):
										if (j == 0) return '7';
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d101      	bne.n	800031a <Keypad_getkey+0xbe>
 8000316:	2337      	movs	r3, #55	; 0x37
 8000318:	e060      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 1) return '4';
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d101      	bne.n	8000324 <Keypad_getkey+0xc8>
 8000320:	2334      	movs	r3, #52	; 0x34
 8000322:	e05b      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 2) return '1';
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d101      	bne.n	800032e <Keypad_getkey+0xd2>
 800032a:	2331      	movs	r3, #49	; 0x31
 800032c:	e056      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 3) return '?';
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d13d      	bne.n	80003b0 <Keypad_getkey+0x154>
 8000334:	233f      	movs	r3, #63	; 0x3f
 8000336:	e051      	b.n	80003dc <Keypad_getkey+0x180>
				break;
				case (1):
										if (j == 0) return '8';
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d101      	bne.n	8000342 <Keypad_getkey+0xe6>
 800033e:	2338      	movs	r3, #56	; 0x38
 8000340:	e04c      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 1) return '5';
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d101      	bne.n	800034c <Keypad_getkey+0xf0>
 8000348:	2335      	movs	r3, #53	; 0x35
 800034a:	e047      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 2) return '2';
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d101      	bne.n	8000356 <Keypad_getkey+0xfa>
 8000352:	2332      	movs	r3, #50	; 0x32
 8000354:	e042      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 3) return '0';
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b03      	cmp	r3, #3
 800035a:	d12b      	bne.n	80003b4 <Keypad_getkey+0x158>
 800035c:	2330      	movs	r3, #48	; 0x30
 800035e:	e03d      	b.n	80003dc <Keypad_getkey+0x180>
				break;
				case (2):
										if (j == 0) return '9';
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <Keypad_getkey+0x10e>
 8000366:	2339      	movs	r3, #57	; 0x39
 8000368:	e038      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 1) return '6';
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d101      	bne.n	8000374 <Keypad_getkey+0x118>
 8000370:	2336      	movs	r3, #54	; 0x36
 8000372:	e033      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 2) return '3';
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d101      	bne.n	800037e <Keypad_getkey+0x122>
 800037a:	2333      	movs	r3, #51	; 0x33
 800037c:	e02e      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 3) return '=';
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d119      	bne.n	80003b8 <Keypad_getkey+0x15c>
 8000384:	233d      	movs	r3, #61	; 0x3d
 8000386:	e029      	b.n	80003dc <Keypad_getkey+0x180>
				break;
				case (3):
										if (j == 0) return '/';
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <Keypad_getkey+0x136>
 800038e:	232f      	movs	r3, #47	; 0x2f
 8000390:	e024      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 1) return '*';
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d101      	bne.n	800039c <Keypad_getkey+0x140>
 8000398:	232a      	movs	r3, #42	; 0x2a
 800039a:	e01f      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 2) return '-';
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d101      	bne.n	80003a6 <Keypad_getkey+0x14a>
 80003a2:	232d      	movs	r3, #45	; 0x2d
 80003a4:	e01a      	b.n	80003dc <Keypad_getkey+0x180>
										else if (j == 3) return '+';
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d107      	bne.n	80003bc <Keypad_getkey+0x160>
 80003ac:	232b      	movs	r3, #43	; 0x2b
 80003ae:	e015      	b.n	80003dc <Keypad_getkey+0x180>
				break;
 80003b0:	bf00      	nop
 80003b2:	e004      	b.n	80003be <Keypad_getkey+0x162>
				break;
 80003b4:	bf00      	nop
 80003b6:	e002      	b.n	80003be <Keypad_getkey+0x162>
				break;
 80003b8:	bf00      	nop
 80003ba:	e000      	b.n	80003be <Keypad_getkey+0x162>
				break;
 80003bc:	bf00      	nop
		for(j = 0; j < 4; j++){
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	f77f af7b 	ble.w	80002c2 <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3301      	adds	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	f77f af47 	ble.w	8000268 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 80003da:	2341      	movs	r3, #65	; 0x41
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000010 	.word	0x20000010
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	20000000 	.word	0x20000000

080003f0 <delay>:


#include "lcd.h"
void delay(int x)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for (i=0;i<x;i++)
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	e00b      	b.n	8000416 <delay+0x26>
		for (j=0;j<255;j++);
 80003fe:	2300      	movs	r3, #0
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	e002      	b.n	800040a <delay+0x1a>
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	3301      	adds	r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	2bfe      	cmp	r3, #254	; 0xfe
 800040e:	d9f9      	bls.n	8000404 <delay+0x14>
	for (i=0;i<x;i++)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3301      	adds	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	429a      	cmp	r2, r3
 800041c:	d3ef      	bcc.n	80003fe <delay+0xe>
}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <LCD_clear_screen>:
void LCD_clear_screen(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 800042c:	2001      	movs	r0, #1
 800042e:	f000 f9bf 	bl	80007b0 <LCD_WRITE_COMMAND>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <LCD_lcd_kick>:

void LCD_lcd_kick(){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	MCAL_GPIO_Write_PIN(LCD_PORT, EN_SWITCH, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000442:	4807      	ldr	r0, [pc, #28]	; (8000460 <LCD_lcd_kick+0x28>)
 8000444:	f000 fb1c 	bl	8000a80 <MCAL_GPIO_Write_PIN>
	//	LCD_CTRL |= (1 << EN_SWITCH);
	delay(50);
 8000448:	2032      	movs	r0, #50	; 0x32
 800044a:	f7ff ffd1 	bl	80003f0 <delay>
	MCAL_GPIO_Write_PIN(LCD_PORT, EN_SWITCH, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000454:	4802      	ldr	r0, [pc, #8]	; (8000460 <LCD_lcd_kick+0x28>)
 8000456:	f000 fb13 	bl	8000a80 <MCAL_GPIO_Write_PIN>

	//	LCD_CTRL &= ~(1 << EN_SWITCH);
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40010800 	.word	0x40010800

08000464 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	460a      	mov	r2, r1
 800046e:	71fb      	strb	r3, [r7, #7]
 8000470:	4613      	mov	r3, r2
 8000472:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d108      	bne.n	800048c <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 800047a:	79bb      	ldrb	r3, [r7, #6]
 800047c:	2b0f      	cmp	r3, #15
 800047e:	d805      	bhi.n	800048c <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 8000480:	79bb      	ldrb	r3, [r7, #6]
 8000482:	3b80      	subs	r3, #128	; 0x80
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f000 f992 	bl	80007b0 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	2b02      	cmp	r3, #2
 8000490:	d108      	bne.n	80004a4 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000492:	79bb      	ldrb	r3, [r7, #6]
 8000494:	2b0f      	cmp	r3, #15
 8000496:	d805      	bhi.n	80004a4 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000498:	79bb      	ldrb	r3, [r7, #6]
 800049a:	3b40      	subs	r3, #64	; 0x40
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 f986 	bl	80007b0 <LCD_WRITE_COMMAND>
		}
	}
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <LCD_INIT>:
GPIO_PinConfig_t PinConfig;
void LCD_INIT(){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	delay(20);
 80004b0:	2014      	movs	r0, #20
 80004b2:	f7ff ff9d 	bl	80003f0 <delay>

	//control pin input
	//enable config input floating
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80004b6:	4b52      	ldr	r3, [pc, #328]	; (8000600 <LCD_INIT+0x154>)
 80004b8:	2204      	movs	r2, #4
 80004ba:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=EN_SWITCH;
 80004bc:	4b50      	ldr	r3, [pc, #320]	; (8000600 <LCD_INIT+0x154>)
 80004be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004c2:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80004c4:	4b4e      	ldr	r3, [pc, #312]	; (8000600 <LCD_INIT+0x154>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 80004ca:	494d      	ldr	r1, [pc, #308]	; (8000600 <LCD_INIT+0x154>)
 80004cc:	484d      	ldr	r0, [pc, #308]	; (8000604 <LCD_INIT+0x158>)
 80004ce:	f000 fa44 	bl	800095a <MCAL_GPIO_Init>
	//RS config input floating
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80004d2:	4b4b      	ldr	r3, [pc, #300]	; (8000600 <LCD_INIT+0x154>)
 80004d4:	2204      	movs	r2, #4
 80004d6:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80004d8:	4b49      	ldr	r3, [pc, #292]	; (8000600 <LCD_INIT+0x154>)
 80004da:	2201      	movs	r2, #1
 80004dc:	70da      	strb	r2, [r3, #3]
	PinConfig.GPIO_PinNumber=RS_SWITCH;
 80004de:	4b48      	ldr	r3, [pc, #288]	; (8000600 <LCD_INIT+0x154>)
 80004e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004e4:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 80004e6:	4946      	ldr	r1, [pc, #280]	; (8000600 <LCD_INIT+0x154>)
 80004e8:	4846      	ldr	r0, [pc, #280]	; (8000604 <LCD_INIT+0x158>)
 80004ea:	f000 fa36 	bl	800095a <MCAL_GPIO_Init>
	//RW config input floating
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80004ee:	4b44      	ldr	r3, [pc, #272]	; (8000600 <LCD_INIT+0x154>)
 80004f0:	2204      	movs	r2, #4
 80004f2:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80004f4:	4b42      	ldr	r3, [pc, #264]	; (8000600 <LCD_INIT+0x154>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	70da      	strb	r2, [r3, #3]
	PinConfig.GPIO_PinNumber=RW_SWITCH;
 80004fa:	4b41      	ldr	r3, [pc, #260]	; (8000600 <LCD_INIT+0x154>)
 80004fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000500:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000502:	493f      	ldr	r1, [pc, #252]	; (8000600 <LCD_INIT+0x154>)
 8000504:	483f      	ldr	r0, [pc, #252]	; (8000604 <LCD_INIT+0x158>)
 8000506:	f000 fa28 	bl	800095a <MCAL_GPIO_Init>

	delay(15);
 800050a:	200f      	movs	r0, #15
 800050c:	f7ff ff70 	bl	80003f0 <delay>

	//DATA pins output config
	//P0 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000510:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <LCD_INIT+0x154>)
 8000512:	2204      	movs	r2, #4
 8000514:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_0;
 8000516:	4b3a      	ldr	r3, [pc, #232]	; (8000600 <LCD_INIT+0x154>)
 8000518:	2201      	movs	r2, #1
 800051a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 800051c:	4b38      	ldr	r3, [pc, #224]	; (8000600 <LCD_INIT+0x154>)
 800051e:	2201      	movs	r2, #1
 8000520:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000522:	4937      	ldr	r1, [pc, #220]	; (8000600 <LCD_INIT+0x154>)
 8000524:	4837      	ldr	r0, [pc, #220]	; (8000604 <LCD_INIT+0x158>)
 8000526:	f000 fa18 	bl	800095a <MCAL_GPIO_Init>

	//P1 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 800052a:	4b35      	ldr	r3, [pc, #212]	; (8000600 <LCD_INIT+0x154>)
 800052c:	2204      	movs	r2, #4
 800052e:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_1;
 8000530:	4b33      	ldr	r3, [pc, #204]	; (8000600 <LCD_INIT+0x154>)
 8000532:	2202      	movs	r2, #2
 8000534:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <LCD_INIT+0x154>)
 8000538:	2201      	movs	r2, #1
 800053a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 800053c:	4930      	ldr	r1, [pc, #192]	; (8000600 <LCD_INIT+0x154>)
 800053e:	4831      	ldr	r0, [pc, #196]	; (8000604 <LCD_INIT+0x158>)
 8000540:	f000 fa0b 	bl	800095a <MCAL_GPIO_Init>

	//P2 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000544:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <LCD_INIT+0x154>)
 8000546:	2204      	movs	r2, #4
 8000548:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_2;
 800054a:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <LCD_INIT+0x154>)
 800054c:	2204      	movs	r2, #4
 800054e:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000550:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <LCD_INIT+0x154>)
 8000552:	2201      	movs	r2, #1
 8000554:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000556:	492a      	ldr	r1, [pc, #168]	; (8000600 <LCD_INIT+0x154>)
 8000558:	482a      	ldr	r0, [pc, #168]	; (8000604 <LCD_INIT+0x158>)
 800055a:	f000 f9fe 	bl	800095a <MCAL_GPIO_Init>

	//P3 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <LCD_INIT+0x154>)
 8000560:	2204      	movs	r2, #4
 8000562:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_3;
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <LCD_INIT+0x154>)
 8000566:	2208      	movs	r2, #8
 8000568:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <LCD_INIT+0x154>)
 800056c:	2201      	movs	r2, #1
 800056e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000570:	4923      	ldr	r1, [pc, #140]	; (8000600 <LCD_INIT+0x154>)
 8000572:	4824      	ldr	r0, [pc, #144]	; (8000604 <LCD_INIT+0x158>)
 8000574:	f000 f9f1 	bl	800095a <MCAL_GPIO_Init>

	//P4 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <LCD_INIT+0x154>)
 800057a:	2204      	movs	r2, #4
 800057c:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_4;
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <LCD_INIT+0x154>)
 8000580:	2210      	movs	r2, #16
 8000582:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <LCD_INIT+0x154>)
 8000586:	2201      	movs	r2, #1
 8000588:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 800058a:	491d      	ldr	r1, [pc, #116]	; (8000600 <LCD_INIT+0x154>)
 800058c:	481d      	ldr	r0, [pc, #116]	; (8000604 <LCD_INIT+0x158>)
 800058e:	f000 f9e4 	bl	800095a <MCAL_GPIO_Init>

	//P5 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <LCD_INIT+0x154>)
 8000594:	2204      	movs	r2, #4
 8000596:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_5;
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <LCD_INIT+0x154>)
 800059a:	2220      	movs	r2, #32
 800059c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <LCD_INIT+0x154>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 80005a4:	4916      	ldr	r1, [pc, #88]	; (8000600 <LCD_INIT+0x154>)
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <LCD_INIT+0x158>)
 80005a8:	f000 f9d7 	bl	800095a <MCAL_GPIO_Init>

	//P6 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <LCD_INIT+0x154>)
 80005ae:	2204      	movs	r2, #4
 80005b0:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_6;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <LCD_INIT+0x154>)
 80005b4:	2240      	movs	r2, #64	; 0x40
 80005b6:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <LCD_INIT+0x154>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 80005be:	4910      	ldr	r1, [pc, #64]	; (8000600 <LCD_INIT+0x154>)
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <LCD_INIT+0x158>)
 80005c2:	f000 f9ca 	bl	800095a <MCAL_GPIO_Init>

	//P7 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <LCD_INIT+0x154>)
 80005c8:	2204      	movs	r2, #4
 80005ca:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_7;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <LCD_INIT+0x154>)
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <LCD_INIT+0x154>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 80005d8:	4909      	ldr	r1, [pc, #36]	; (8000600 <LCD_INIT+0x154>)
 80005da:	480a      	ldr	r0, [pc, #40]	; (8000604 <LCD_INIT+0x158>)
 80005dc:	f000 f9bd 	bl	800095a <MCAL_GPIO_Init>


	LCD_clear_screen();
 80005e0:	f7ff ff22 	bl	8000428 <LCD_clear_screen>


#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80005e4:	2038      	movs	r0, #56	; 0x38
 80005e6:	f000 f8e3 	bl	80007b0 <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80005ea:	2006      	movs	r0, #6
 80005ec:	f000 f8e0 	bl	80007b0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80005f0:	2080      	movs	r0, #128	; 0x80
 80005f2:	f000 f8dd 	bl	80007b0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 80005f6:	200f      	movs	r0, #15
 80005f8:	f000 f8da 	bl	80007b0 <LCD_WRITE_COMMAND>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000003c 	.word	0x2000003c
 8000604:	40010800 	.word	0x40010800

08000608 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	//	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);

	//P0 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Input_FLO;
 800060c:	4b66      	ldr	r3, [pc, #408]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800060e:	2201      	movs	r2, #1
 8000610:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_0;
 8000612:	4b65      	ldr	r3, [pc, #404]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000614:	2201      	movs	r2, #1
 8000616:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000618:	4963      	ldr	r1, [pc, #396]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800061a:	4864      	ldr	r0, [pc, #400]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 800061c:	f000 f99d 	bl	800095a <MCAL_GPIO_Init>

	//P1 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Input_FLO;
 8000620:	4b61      	ldr	r3, [pc, #388]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000622:	2201      	movs	r2, #1
 8000624:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_1;
 8000626:	4b60      	ldr	r3, [pc, #384]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000628:	2202      	movs	r2, #2
 800062a:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 800062c:	495e      	ldr	r1, [pc, #376]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800062e:	485f      	ldr	r0, [pc, #380]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 8000630:	f000 f993 	bl	800095a <MCAL_GPIO_Init>

	//P2 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Input_FLO;
 8000634:	4b5c      	ldr	r3, [pc, #368]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000636:	2201      	movs	r2, #1
 8000638:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_2;
 800063a:	4b5b      	ldr	r3, [pc, #364]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800063c:	2204      	movs	r2, #4
 800063e:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000640:	4959      	ldr	r1, [pc, #356]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000642:	485a      	ldr	r0, [pc, #360]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 8000644:	f000 f989 	bl	800095a <MCAL_GPIO_Init>

	//P3 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Input_FLO;
 8000648:	4b57      	ldr	r3, [pc, #348]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800064a:	2201      	movs	r2, #1
 800064c:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_3;
 800064e:	4b56      	ldr	r3, [pc, #344]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000650:	2208      	movs	r2, #8
 8000652:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000654:	4954      	ldr	r1, [pc, #336]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000656:	4855      	ldr	r0, [pc, #340]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 8000658:	f000 f97f 	bl	800095a <MCAL_GPIO_Init>

	//P4 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Input_FLO;
 800065c:	4b52      	ldr	r3, [pc, #328]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800065e:	2201      	movs	r2, #1
 8000660:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_4;
 8000662:	4b51      	ldr	r3, [pc, #324]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000664:	2210      	movs	r2, #16
 8000666:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000668:	494f      	ldr	r1, [pc, #316]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800066a:	4850      	ldr	r0, [pc, #320]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 800066c:	f000 f975 	bl	800095a <MCAL_GPIO_Init>

	//P5 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Input_FLO;
 8000670:	4b4d      	ldr	r3, [pc, #308]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000672:	2201      	movs	r2, #1
 8000674:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_5;
 8000676:	4b4c      	ldr	r3, [pc, #304]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000678:	2220      	movs	r2, #32
 800067a:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 800067c:	494a      	ldr	r1, [pc, #296]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800067e:	484b      	ldr	r0, [pc, #300]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 8000680:	f000 f96b 	bl	800095a <MCAL_GPIO_Init>

	//P6 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Input_FLO;
 8000684:	4b48      	ldr	r3, [pc, #288]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000686:	2201      	movs	r2, #1
 8000688:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_6;
 800068a:	4b47      	ldr	r3, [pc, #284]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800068c:	2240      	movs	r2, #64	; 0x40
 800068e:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000690:	4945      	ldr	r1, [pc, #276]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000692:	4846      	ldr	r0, [pc, #280]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 8000694:	f000 f961 	bl	800095a <MCAL_GPIO_Init>

	//P7 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Input_FLO;
 8000698:	4b43      	ldr	r3, [pc, #268]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800069a:	2201      	movs	r2, #1
 800069c:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_7;
 800069e:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 80006a4:	4940      	ldr	r1, [pc, #256]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006a6:	4841      	ldr	r0, [pc, #260]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 80006a8:	f000 f957 	bl	800095a <MCAL_GPIO_Init>

	MCAL_GPIO_Write_PIN(LCD_PORT,RW_SWITCH, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b2:	483e      	ldr	r0, [pc, #248]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 80006b4:	f000 f9e4 	bl	8000a80 <MCAL_GPIO_Write_PIN>
	//	LCD_CTRL |= (1 << RW_SWITCH);
	MCAL_GPIO_Write_PIN(LCD_PORT,RS_SWITCH, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006be:	483b      	ldr	r0, [pc, #236]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 80006c0:	f000 f9de 	bl	8000a80 <MCAL_GPIO_Write_PIN>

	//	LCD_CTRL &= ~(1 << RS_SWITCH);
	LCD_lcd_kick();
 80006c4:	f7ff feb8 	bl	8000438 <LCD_lcd_kick>

	//DATA pins output config
	//P0 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80006c8:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_0;
 80006ce:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80006d4:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 80006da:	4933      	ldr	r1, [pc, #204]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006dc:	4833      	ldr	r0, [pc, #204]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 80006de:	f000 f93c 	bl	800095a <MCAL_GPIO_Init>

	//P1 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80006e2:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_1;
 80006e8:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006ea:	2202      	movs	r2, #2
 80006ec:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 80006ee:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 80006f4:	492c      	ldr	r1, [pc, #176]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006f6:	482d      	ldr	r0, [pc, #180]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 80006f8:	f000 f92f 	bl	800095a <MCAL_GPIO_Init>

	//P2 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 80006fe:	2204      	movs	r2, #4
 8000700:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_2;
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000704:	2204      	movs	r2, #4
 8000706:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800070a:	2201      	movs	r2, #1
 800070c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 800070e:	4926      	ldr	r1, [pc, #152]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000710:	4826      	ldr	r0, [pc, #152]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 8000712:	f000 f922 	bl	800095a <MCAL_GPIO_Init>

	//P3 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000718:	2204      	movs	r2, #4
 800071a:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_3;
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800071e:	2208      	movs	r2, #8
 8000720:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000724:	2201      	movs	r2, #1
 8000726:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000728:	491f      	ldr	r1, [pc, #124]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800072a:	4820      	ldr	r0, [pc, #128]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 800072c:	f000 f915 	bl	800095a <MCAL_GPIO_Init>

	//P4 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000732:	2204      	movs	r2, #4
 8000734:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_4;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000738:	2210      	movs	r2, #16
 800073a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800073e:	2201      	movs	r2, #1
 8000740:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000742:	4919      	ldr	r1, [pc, #100]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000744:	4819      	ldr	r0, [pc, #100]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 8000746:	f000 f908 	bl	800095a <MCAL_GPIO_Init>

	//P5 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800074c:	2204      	movs	r2, #4
 800074e:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_5;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000752:	2220      	movs	r2, #32
 8000754:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000758:	2201      	movs	r2, #1
 800075a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 800075c:	4912      	ldr	r1, [pc, #72]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800075e:	4813      	ldr	r0, [pc, #76]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 8000760:	f000 f8fb 	bl	800095a <MCAL_GPIO_Init>

	//P6 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000766:	2204      	movs	r2, #4
 8000768:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_6;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800076c:	2240      	movs	r2, #64	; 0x40
 800076e:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000772:	2201      	movs	r2, #1
 8000774:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000776:	490c      	ldr	r1, [pc, #48]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 800077a:	f000 f8ee 	bl	800095a <MCAL_GPIO_Init>

	//P7 config output pp
	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000780:	2204      	movs	r2, #4
 8000782:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_7;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 800078c:	2201      	movs	r2, #1
 800078e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinConfig);
 8000790:	4905      	ldr	r1, [pc, #20]	; (80007a8 <LCD_check_lcd_isbusy+0x1a0>)
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 8000794:	f000 f8e1 	bl	800095a <MCAL_GPIO_Init>


	//	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
	MCAL_GPIO_Write_PIN(LCD_PORT,RW_SWITCH, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <LCD_check_lcd_isbusy+0x1a4>)
 80007a0:	f000 f96e 	bl	8000a80 <MCAL_GPIO_Write_PIN>

	//	LCD_CTRL &= ~(1 << RW_SWITCH);

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000003c 	.word	0x2000003c
 80007ac:	40010800 	.word	0x40010800

080007b0 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 80007ba:	f7ff ff25 	bl	8000608 <LCD_check_lcd_isbusy>
	MCAL_GPIO_Write_Port(LCD_PORT, command);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	4619      	mov	r1, r3
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <LCD_WRITE_COMMAND+0x40>)
 80007c6:	f000 f979 	bl	8000abc <MCAL_GPIO_Write_Port>
	//	LCD_PORT = command;
	MCAL_GPIO_Write_PIN(LCD_PORT,RS_SWITCH, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	4807      	ldr	r0, [pc, #28]	; (80007f0 <LCD_WRITE_COMMAND+0x40>)
 80007d2:	f000 f955 	bl	8000a80 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_PORT,RW_SWITCH, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <LCD_WRITE_COMMAND+0x40>)
 80007de:	f000 f94f 	bl	8000a80 <MCAL_GPIO_Write_PIN>

	//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	LCD_lcd_kick();
 80007e2:	f7ff fe29 	bl	8000438 <LCD_lcd_kick>
	LCD_lcd_kick ();
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
#endif
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40010800 	.word	0x40010800

080007f4 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 80007fe:	f7ff ff03 	bl	8000608 <LCD_check_lcd_isbusy>
	MCAL_GPIO_Write_Port(LCD_PORT,character);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	b29b      	uxth	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <LCD_WRITE_CHAR+0x44>)
 800080a:	f000 f957 	bl	8000abc <MCAL_GPIO_Write_Port>
	//	LCD_PORT = character;
	MCAL_GPIO_Write_PIN(LCD_PORT, RW_SWITCH, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <LCD_WRITE_CHAR+0x44>)
 8000816:	f000 f933 	bl	8000a80 <MCAL_GPIO_Write_PIN>
	//	LCD_CTRL &= ~(1 << RW_SWITCH);
	MCAL_GPIO_Write_PIN(LCD_PORT,RS_SWITCH, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <LCD_WRITE_CHAR+0x44>)
 8000822:	f000 f92d 	bl	8000a80 <MCAL_GPIO_Write_PIN>

	//	LCD_CTRL |= (1 << RS_SWITCH);
	delay(1);
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff fde2 	bl	80003f0 <delay>
	LCD_lcd_kick();
 800082c:	f7ff fe04 	bl	8000438 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	LCD_lcd_kick ();
#endif
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40010800 	.word	0x40010800

0800083c <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000848:	e01c      	b.n	8000884 <LCD_WRITE_STRING+0x48>
		count++;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffcb 	bl	80007f4 <LCD_WRITE_CHAR>
		if (count == 16)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2b10      	cmp	r3, #16
 8000862:	d104      	bne.n	800086e <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 8000864:	2100      	movs	r1, #0
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff fdfc 	bl	8000464 <LCD_GOTO_XY>
 800086c:	e00a      	b.n	8000884 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b20      	cmp	r3, #32
 8000872:	d107      	bne.n	8000884 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 8000874:	f7ff fdd8 	bl	8000428 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000878:	2100      	movs	r1, #0
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff fdf2 	bl	8000464 <LCD_GOTO_XY>
			count = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1de      	bne.n	800084a <LCD_WRITE_STRING+0xe>
		}
	}
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <Get_CRLH_Position>:
 * @param [in] 	-PinConfig struct contain config. of the port
 * @retval 		-none
 * Note			-none
 */
uint8_t Get_CRLH_Position(uint16_t Pin_Number)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	// we will switch on the number of pin


	    if (Pin_Number == GPIO_PIN_0) return 0;
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d101      	bne.n	80008a8 <Get_CRLH_Position+0x14>
 80008a4:	2300      	movs	r3, #0
 80008a6:	e053      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_1) return 4;
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d101      	bne.n	80008b2 <Get_CRLH_Position+0x1e>
 80008ae:	2304      	movs	r3, #4
 80008b0:	e04e      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_2) return 8;
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d101      	bne.n	80008bc <Get_CRLH_Position+0x28>
 80008b8:	2308      	movs	r3, #8
 80008ba:	e049      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_3) return 12;
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	2b08      	cmp	r3, #8
 80008c0:	d101      	bne.n	80008c6 <Get_CRLH_Position+0x32>
 80008c2:	230c      	movs	r3, #12
 80008c4:	e044      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_4) return 16;
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	2b10      	cmp	r3, #16
 80008ca:	d101      	bne.n	80008d0 <Get_CRLH_Position+0x3c>
 80008cc:	2310      	movs	r3, #16
 80008ce:	e03f      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_5) return 20;
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	2b20      	cmp	r3, #32
 80008d4:	d101      	bne.n	80008da <Get_CRLH_Position+0x46>
 80008d6:	2314      	movs	r3, #20
 80008d8:	e03a      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_6) return 24;
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	2b40      	cmp	r3, #64	; 0x40
 80008de:	d101      	bne.n	80008e4 <Get_CRLH_Position+0x50>
 80008e0:	2318      	movs	r3, #24
 80008e2:	e035      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_7) return 28;
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	2b80      	cmp	r3, #128	; 0x80
 80008e8:	d101      	bne.n	80008ee <Get_CRLH_Position+0x5a>
 80008ea:	231c      	movs	r3, #28
 80008ec:	e030      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_8) return 0;
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f4:	d101      	bne.n	80008fa <Get_CRLH_Position+0x66>
 80008f6:	2300      	movs	r3, #0
 80008f8:	e02a      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_9) return 4;
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000900:	d101      	bne.n	8000906 <Get_CRLH_Position+0x72>
 8000902:	2304      	movs	r3, #4
 8000904:	e024      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_10) return 8;
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800090c:	d101      	bne.n	8000912 <Get_CRLH_Position+0x7e>
 800090e:	2308      	movs	r3, #8
 8000910:	e01e      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_11) return 12;
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000918:	d101      	bne.n	800091e <Get_CRLH_Position+0x8a>
 800091a:	230c      	movs	r3, #12
 800091c:	e018      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_12) return 16;
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000924:	d101      	bne.n	800092a <Get_CRLH_Position+0x96>
 8000926:	2310      	movs	r3, #16
 8000928:	e012      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_13) return 20;
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000930:	d101      	bne.n	8000936 <Get_CRLH_Position+0xa2>
 8000932:	2314      	movs	r3, #20
 8000934:	e00c      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_14) return 24;
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800093c:	d101      	bne.n	8000942 <Get_CRLH_Position+0xae>
 800093e:	2318      	movs	r3, #24
 8000940:	e006      	b.n	8000950 <Get_CRLH_Position+0xbc>
	    else if (Pin_Number == GPIO_PIN_15) return 28;
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000948:	d101      	bne.n	800094e <Get_CRLH_Position+0xba>
 800094a:	231c      	movs	r3, #28
 800094c:	e000      	b.n	8000950 <Get_CRLH_Position+0xbc>

	    // Optionally, handle invalid Pin_Number
	    return -1; // or another error handling mechanism
 800094e:	23ff      	movs	r3, #255	; 0xff

}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr

0800095a <MCAL_GPIO_Init>:

void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_PinConfig_t *PinConfig)
{
 800095a:	b590      	push	{r4, r7, lr}
 800095c:	b085      	sub	sp, #20
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configure the pins 0 >>> 7
	// Port configuration register high (GPIOx_CRH) configure the pins 8 >>> 15
	// we will create a pointer to points to the register (CRL or CRH) according to condition that the pin number < 8 or not
	// and create a variable to set the value of the configuration in  o/p mode
	volatile uint32_t *Config_Register = NULL; uint8_t PIN_Confige = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
	Config_Register = ((PinConfig->GPIO_PinNumber) < GPIO_PIN_8)?(&GPIOx->CRL):(&GPIOx->CRH);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	2bff      	cmp	r3, #255	; 0xff
 8000972:	d801      	bhi.n	8000978 <MCAL_GPIO_Init+0x1e>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	e001      	b.n	800097c <MCAL_GPIO_Init+0x22>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3304      	adds	r3, #4
 800097c:	60bb      	str	r3, [r7, #8]
	// we will use the function Get_CRLH_Position to get the shift of pin ... each pin reserve 4 bit from the register

	// clear CNFx[1:0] MODEx[1:0]
	(*Config_Register) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff86 	bl	8000894 <Get_CRLH_Position>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	230f      	movs	r3, #15
 800098e:	4093      	lsls	r3, r2
 8000990:	43da      	mvns	r2, r3
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	401a      	ands	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	601a      	str	r2, [r3, #0]
	// if the pin in the Output modes
	if((PinConfig->GPIO_MODE == GPIO_MODE_Output_AF_OD) ||(PinConfig->GPIO_MODE == GPIO_MODE_Output_AF_PP)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	789b      	ldrb	r3, [r3, #2]
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	d00b      	beq.n	80009bc <MCAL_GPIO_Init+0x62>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	789b      	ldrb	r3, [r3, #2]
 80009a8:	2b06      	cmp	r3, #6
 80009aa:	d007      	beq.n	80009bc <MCAL_GPIO_Init+0x62>
			||(PinConfig->GPIO_MODE == GPIO_MODE_Output_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_Output_PP))
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	789b      	ldrb	r3, [r3, #2]
 80009b0:	2b05      	cmp	r3, #5
 80009b2:	d003      	beq.n	80009bc <MCAL_GPIO_Init+0x62>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	789b      	ldrb	r3, [r3, #2]
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	d10e      	bne.n	80009da <MCAL_GPIO_Init+0x80>
	{
		// set CNFx[1:0] MODEx[1:0]
		PIN_Confige = (((PinConfig->GPIO_MODE - 4) << 2) | ((PinConfig->GPIO_Output_Speed) & 0x0f));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	3b04      	subs	r3, #4
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	b25a      	sxtb	r2, r3
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	78db      	ldrb	r3, [r3, #3]
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	f003 030f 	and.w	r3, r3, #15
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b25b      	sxtb	r3, r3
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e02c      	b.n	8000a34 <MCAL_GPIO_Init+0xda>

	}
	// if the pin in i/p modes
	else // mode = 00 in case of i/p modes
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_Input_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d003      	beq.n	80009ea <MCAL_GPIO_Init+0x90>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	789b      	ldrb	r3, [r3, #2]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d107      	bne.n	80009fa <MCAL_GPIO_Init+0xa0>
		{
			// set CNFx[1:0] MODEx[1:0]
			PIN_Confige = (((PinConfig->GPIO_MODE << 2) | 0x0) & 0x0F);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	73fb      	strb	r3, [r7, #15]
 80009f8:	e01c      	b.n	8000a34 <MCAL_GPIO_Init+0xda>

		}
		else if((PinConfig->GPIO_MODE == GPIO_MODE_AF_Input)) // consider it as input floating
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	789b      	ldrb	r3, [r3, #2]
 80009fe:	2b08      	cmp	r3, #8
 8000a00:	d102      	bne.n	8000a08 <MCAL_GPIO_Init+0xae>
		{
			// set CNFx[1:0] MODEx[1:0]
			PIN_Confige = (((GPIO_MODE_Input_FLO << 2) | 0x0) & 0x0F);
 8000a02:	2304      	movs	r3, #4
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e015      	b.n	8000a34 <MCAL_GPIO_Init+0xda>
		}
		else // the pin PD or PU modes
		{
			// set CNFx[1:0] MODEx[1:0]
			PIN_Confige = (((GPIO_MODE_Input_PU << 2) | 0x0) & 0x0F);
 8000a08:	2308      	movs	r3, #8
 8000a0a:	73fb      	strb	r3, [r7, #15]

			if((PinConfig->GPIO_MODE == GPIO_MODE_Input_PU))
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	789b      	ldrb	r3, [r3, #2]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d107      	bne.n	8000a24 <MCAL_GPIO_Init+0xca>
			{
				// PxODR = 1 if Pull up mode : Table 20. Port bit configuration table
				GPIOx->ODR |=(PinConfig->GPIO_PinNumber);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	8812      	ldrh	r2, [r2, #0]
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	e007      	b.n	8000a34 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// PxODR = 0 if Pull down mode : Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	8812      	ldrh	r2, [r2, #0]
 8000a2c:	43d2      	mvns	r2, r2
 8000a2e:	401a      	ands	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	60da      	str	r2, [r3, #12]

		}

	}
	// set the values on the register CRL or CRH
	(*Config_Register)|= (PIN_Confige << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000a34:	7bfc      	ldrb	r4, [r7, #15]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff2a 	bl	8000894 <Get_CRLH_Position>
 8000a40:	4603      	mov	r3, r0
 8000a42:	fa04 f203 	lsl.w	r2, r4, r3
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd90      	pop	{r4, r7, pc}

08000a58 <MCAL_GPIO_Read_PIN>:
 * @param [in] 	-GPIOx (x=a,b,c,d,e)
 * @param [in] 	-Pin_Number @ref GPIO_PINS_Define
 * @retval 		-pin value @ref GPIO_PIN_State
 * Note			-none
 */
uint8_t  MCAL_GPIO_Read_PIN(GPIO_TypeDef * GPIOx ,uint16_t Pin_Number){
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
	if ((GPIOx->IDR)&Pin_Number)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	887b      	ldrh	r3, [r7, #2]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MCAL_GPIO_Read_PIN+0x1c>
	{
		return  GPIO_PIN_SET;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <MCAL_GPIO_Read_PIN+0x1e>
	}
	return GPIO_PIN_RESET;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <MCAL_GPIO_Write_PIN>:
 * @param [in] 	-Pin_Number @ref GPIO_PINS_Define
 * @param [in]  	-pin value @ref GPIO_PIN_State
 * @retval 		-none
 * Note			-none
 */
void   MCAL_GPIO_Write_PIN(GPIO_TypeDef * GPIOx , uint16_t Pin_Number,uint8_t Value){
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	707b      	strb	r3, [r7, #1]
	if (Value==GPIO_PIN_SET)
 8000a90:	787b      	ldrb	r3, [r7, #1]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d106      	bne.n	8000aa4 <MCAL_GPIO_Write_PIN+0x24>
	{
		GPIOx->ODR|=(Pin_Number);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->ODR&=~(Pin_Number);
}
 8000aa2:	e006      	b.n	8000ab2 <MCAL_GPIO_Write_PIN+0x32>
	else GPIOx->ODR&=~(Pin_Number);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	887a      	ldrh	r2, [r7, #2]
 8000aaa:	43d2      	mvns	r2, r2
 8000aac:	401a      	ands	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60da      	str	r2, [r3, #12]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <MCAL_GPIO_Write_Port>:
 * @param [in] 	-GPIOx (x=a,b,c,d,e)
 * @param [in]  	-port value
 * @retval 		-none
 * Note			-none
 */
void   MCAL_GPIO_Write_Port(GPIO_TypeDef * GPIOx , uint16_t Value){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR = Value ;
 8000ac8:	887a      	ldrh	r2, [r7, #2]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60da      	str	r2, [r3, #12]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <init_GPIO>:
#define Eight  0x80  // 0b10000000
#define Nine   0x90  // 0b10010000


void init_GPIO()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0





	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <init_GPIO+0xcc>)
 8000ade:	2204      	movs	r2, #4
 8000ae0:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_9;
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <init_GPIO+0xcc>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae8:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <init_GPIO+0xcc>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB,&PinConfig);
 8000af0:	492c      	ldr	r1, [pc, #176]	; (8000ba4 <init_GPIO+0xcc>)
 8000af2:	482d      	ldr	r0, [pc, #180]	; (8000ba8 <init_GPIO+0xd0>)
 8000af4:	f7ff ff31 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <init_GPIO+0xcc>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_10;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <init_GPIO+0xcc>)
 8000b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b04:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <init_GPIO+0xcc>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB,&PinConfig);
 8000b0c:	4925      	ldr	r1, [pc, #148]	; (8000ba4 <init_GPIO+0xcc>)
 8000b0e:	4826      	ldr	r0, [pc, #152]	; (8000ba8 <init_GPIO+0xd0>)
 8000b10:	f7ff ff23 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <init_GPIO+0xcc>)
 8000b16:	2204      	movs	r2, #4
 8000b18:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_11;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <init_GPIO+0xcc>)
 8000b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b20:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <init_GPIO+0xcc>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB,&PinConfig);
 8000b28:	491e      	ldr	r1, [pc, #120]	; (8000ba4 <init_GPIO+0xcc>)
 8000b2a:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <init_GPIO+0xd0>)
 8000b2c:	f7ff ff15 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <init_GPIO+0xcc>)
 8000b32:	2204      	movs	r2, #4
 8000b34:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_12;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <init_GPIO+0xcc>)
 8000b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b3c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <init_GPIO+0xcc>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB,&PinConfig);
 8000b44:	4917      	ldr	r1, [pc, #92]	; (8000ba4 <init_GPIO+0xcc>)
 8000b46:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <init_GPIO+0xd0>)
 8000b48:	f7ff ff07 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <init_GPIO+0xcc>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_13;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <init_GPIO+0xcc>)
 8000b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b58:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <init_GPIO+0xcc>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB,&PinConfig);
 8000b60:	4910      	ldr	r1, [pc, #64]	; (8000ba4 <init_GPIO+0xcc>)
 8000b62:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <init_GPIO+0xd0>)
 8000b64:	f7ff fef9 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <init_GPIO+0xcc>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_14;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <init_GPIO+0xcc>)
 8000b70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b74:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <init_GPIO+0xcc>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB,&PinConfig);
 8000b7c:	4909      	ldr	r1, [pc, #36]	; (8000ba4 <init_GPIO+0xcc>)
 8000b7e:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <init_GPIO+0xd0>)
 8000b80:	f7ff feeb 	bl	800095a <MCAL_GPIO_Init>

	PinConfig.GPIO_MODE=GPIO_MODE_Output_PP;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <init_GPIO+0xcc>)
 8000b86:	2204      	movs	r2, #4
 8000b88:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_PinNumber=GPIO_PIN_15;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <init_GPIO+0xcc>)
 8000b8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b90:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10MHz;
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <init_GPIO+0xcc>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB,&PinConfig);
 8000b98:	4902      	ldr	r1, [pc, #8]	; (8000ba4 <init_GPIO+0xcc>)
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <init_GPIO+0xd0>)
 8000b9c:	f7ff fedd 	bl	800095a <MCAL_GPIO_Init>



}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000003c 	.word	0x2000003c
 8000ba8:	40010c00 	.word	0x40010c00

08000bac <init_clock>:
void init_clock()
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	//GPIO enable clock
	RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <init_clock+0x24>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <init_clock+0x24>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_ENABLE();
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <init_clock+0x24>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <init_clock+0x24>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	6193      	str	r3, [r2, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <main>:

int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
	init_clock();
 8000bda:	f7ff ffe7 	bl	8000bac <init_clock>
	init_GPIO();
 8000bde:	f7ff ff7b 	bl	8000ad8 <init_GPIO>
	LCD_INIT();
 8000be2:	f7ff fc63 	bl	80004ac <LCD_INIT>
	uint8_t seg[]={Zero,One,Two,Three,Four,Five,Six,Seven,Eight,Nine};
 8000be6:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <main+0xb4>)
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bee:	c303      	stmia	r3!, {r0, r1}
 8000bf0:	801a      	strh	r2, [r3, #0]
	uint8_t lc[]={'1','2','3','4','5','6','7','8','9'};
 8000bf2:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <main+0xb8>)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bf8:	c303      	stmia	r3!, {r0, r1}
 8000bfa:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<10;i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	75fb      	strb	r3, [r7, #23]
 8000c00:	e01b      	b.n	8000c3a <main+0x66>
	{
		MCAL_GPIO_Write_Port(GPIOB ,seg[i]<<9);
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
 8000c04:	f107 0218 	add.w	r2, r7, #24
 8000c08:	4413      	add	r3, r2
 8000c0a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4619      	mov	r1, r3
 8000c16:	481e      	ldr	r0, [pc, #120]	; (8000c90 <main+0xbc>)
 8000c18:	f7ff ff50 	bl	8000abc <MCAL_GPIO_Write_Port>
		LCD_WRITE_CHAR(lc[i]);
 8000c1c:	7dfb      	ldrb	r3, [r7, #23]
 8000c1e:	f107 0218 	add.w	r2, r7, #24
 8000c22:	4413      	add	r3, r2
 8000c24:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fde3 	bl	80007f4 <LCD_WRITE_CHAR>
		delay(40);
 8000c2e:	2028      	movs	r0, #40	; 0x28
 8000c30:	f7ff fbde 	bl	80003f0 <delay>
	for (uint8_t i=0;i<10;i++)
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	3301      	adds	r3, #1
 8000c38:	75fb      	strb	r3, [r7, #23]
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
 8000c3c:	2b09      	cmp	r3, #9
 8000c3e:	d9e0      	bls.n	8000c02 <main+0x2e>
	}
	LCD_clear_screen();
 8000c40:	f7ff fbf2 	bl	8000428 <LCD_clear_screen>

	Keypad_init();
 8000c44:	f7ff fa94 	bl	8000170 <Keypad_init>
	unsigned char key_pressed;
	//	volatile char flag =1;
	//	MCAL_GPIO_Write_PIN(GPIOB,GPIO_PIN_13, 0);
	//	MCAL_GPIO_Write_PIN(GPIOB,GPIO_PIN_1, 0);
	LCD_WRITE_STRING("keypad is ready!!");
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <main+0xc0>)
 8000c4a:	f7ff fdf7 	bl	800083c <LCD_WRITE_STRING>
	delay(50);
 8000c4e:	2032      	movs	r0, #50	; 0x32
 8000c50:	f7ff fbce 	bl	80003f0 <delay>
	LCD_clear_screen();
 8000c54:	f7ff fbe8 	bl	8000428 <LCD_clear_screen>
	while (1){


		key_pressed = Keypad_getkey();
 8000c58:	f7ff fb00 	bl	800025c <Keypad_getkey>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	75bb      	strb	r3, [r7, #22]
		switch(key_pressed){
 8000c60:	7dbb      	ldrb	r3, [r7, #22]
 8000c62:	2b3f      	cmp	r3, #63	; 0x3f
 8000c64:	d002      	beq.n	8000c6c <main+0x98>
 8000c66:	2b41      	cmp	r3, #65	; 0x41
 8000c68:	d008      	beq.n	8000c7c <main+0xa8>
 8000c6a:	e002      	b.n	8000c72 <main+0x9e>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 8000c6c:	f7ff fbdc 	bl	8000428 <LCD_clear_screen>
			break;
 8000c70:	e005      	b.n	8000c7e <main+0xaa>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000c72:	7dbb      	ldrb	r3, [r7, #22]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fdbd 	bl	80007f4 <LCD_WRITE_CHAR>
			break;
 8000c7a:	e000      	b.n	8000c7e <main+0xaa>
			break;
 8000c7c:	bf00      	nop
		//			MCAL_GPIO_Toggle_PIN(GPIOB,GPIO_PIN_13);
		//
		//
		//		}

		delay(10);
 8000c7e:	200a      	movs	r0, #10
 8000c80:	f7ff fbb6 	bl	80003f0 <delay>
		key_pressed = Keypad_getkey();
 8000c84:	e7e8      	b.n	8000c58 <main+0x84>
 8000c86:	bf00      	nop
 8000c88:	08000d60 	.word	0x08000d60
 8000c8c:	08000d6c 	.word	0x08000d6c
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	08000d4c 	.word	0x08000d4c

08000c98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c9c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cc6:	f000 f811 	bl	8000cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cca:	f7ff ff83 	bl	8000bd4 <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   r0, =_estack
 8000cd0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000cdc:	08000d80 	.word	0x08000d80
  ldr r2, =_sbss
 8000ce0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ce4:	20000040 	.word	0x20000040

08000ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_2_IRQHandler>
	...

08000cec <__libc_init_array>:
 8000cec:	b570      	push	{r4, r5, r6, lr}
 8000cee:	2500      	movs	r5, #0
 8000cf0:	4e0c      	ldr	r6, [pc, #48]	; (8000d24 <__libc_init_array+0x38>)
 8000cf2:	4c0d      	ldr	r4, [pc, #52]	; (8000d28 <__libc_init_array+0x3c>)
 8000cf4:	1ba4      	subs	r4, r4, r6
 8000cf6:	10a4      	asrs	r4, r4, #2
 8000cf8:	42a5      	cmp	r5, r4
 8000cfa:	d109      	bne.n	8000d10 <__libc_init_array+0x24>
 8000cfc:	f000 f81a 	bl	8000d34 <_init>
 8000d00:	2500      	movs	r5, #0
 8000d02:	4e0a      	ldr	r6, [pc, #40]	; (8000d2c <__libc_init_array+0x40>)
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <__libc_init_array+0x44>)
 8000d06:	1ba4      	subs	r4, r4, r6
 8000d08:	10a4      	asrs	r4, r4, #2
 8000d0a:	42a5      	cmp	r5, r4
 8000d0c:	d105      	bne.n	8000d1a <__libc_init_array+0x2e>
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
 8000d10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d14:	4798      	blx	r3
 8000d16:	3501      	adds	r5, #1
 8000d18:	e7ee      	b.n	8000cf8 <__libc_init_array+0xc>
 8000d1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d1e:	4798      	blx	r3
 8000d20:	3501      	adds	r5, #1
 8000d22:	e7f2      	b.n	8000d0a <__libc_init_array+0x1e>
 8000d24:	08000d78 	.word	0x08000d78
 8000d28:	08000d78 	.word	0x08000d78
 8000d2c:	08000d78 	.word	0x08000d78
 8000d30:	08000d7c 	.word	0x08000d7c

08000d34 <_init>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	bf00      	nop
 8000d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3a:	bc08      	pop	{r3}
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	4770      	bx	lr

08000d40 <_fini>:
 8000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d42:	bf00      	nop
 8000d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d46:	bc08      	pop	{r3}
 8000d48:	469e      	mov	lr, r3
 8000d4a:	4770      	bx	lr
